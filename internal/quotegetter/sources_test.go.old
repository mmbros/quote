package quotegetter

import (
	"context"
	"sort"
	"testing"
)

type testGetQuoter string

func (scr testGetQuoter) Name() string {
	return string(scr)
}

func (scr testGetQuoter) GetQuote(ctx context.Context, isin, url string) (*Result, error) {
	return nil, nil
}

func TestRegisterNil(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Register: nil scraper did not panic!")
		}
	}()

	UnregisterAll()
	Register(nil)
}

func TestRegisterDup(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Register: duplicate scraper did not panic!")
		}
	}()

	UnregisterAll()
	Register(testGetQuoter("name1"))
	Register(testGetQuoter("name2"))
	Register(testGetQuoter("name1"))
}

func TestNames(t *testing.T) {
	testNames := []string{
		"name3",
		"name1",
		"name2",
	}
	UnregisterAll()
	for _, name := range testNames {
		Register(testGetQuoter(name))
	}
	names := Names()
	if len(names) != len(testNames) {
		t.Errorf("Names: invalid length: expected %d, found %d names", len(testNames), len(names))
		return
	}

	sort.Strings(testNames)
	for j, name := range testNames {
		if name != names[j] {
			t.Errorf("Names: not sorted: found %v", names)
			return
		}
	}
}

func TestGet(t *testing.T) {
	testNames := []string{
		"name3",
		"name1",
		"name2",
	}

	UnregisterAll()
	for _, name := range testNames {
		Register(testGetQuoter(name))
	}

	name := "name1"
	qg := Get(name)
	if qg == nil {
		t.Errorf("Get: expected %q QuoteGetter not found ", name)
	}
	if qg.Name() != name {
		t.Errorf("Get: invalid name: expected %q,  found %q ", name, qg.Name())
	}

	name = "name999"
	qg = Get(name)
	if qg != nil {
		t.Errorf("Get: expected nil QuoteGetter for name %q, found %q", name, qg.Name())
	}

}
