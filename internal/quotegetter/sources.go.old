package quotegetter

import (
	"sort"
	"sync"
)

var (
	sourcesMu sync.RWMutex
	sources   = make(map[string]QuoteGetter)
)

// Register makes a quoteGetter available by the provided name.
// If Register is called twice with the same name
// or if quoteGetter is nil, it panics.
func Register(qg QuoteGetter) {
	sourcesMu.Lock()
	defer sourcesMu.Unlock()

	if qg == nil {
		panic("quotegetter.Register: getter is nil")
	}

	name := qg.Name()
	if _, dup := sources[name]; dup {
		panic("quotegetter.Register called twice for getter " + name)
	}

	sources[name] = qg
}

// UnregisterAll removes all the registered QuotesGetters.
// Usefull for tests.
func UnregisterAll() {
	sourcesMu.Lock()
	defer sourcesMu.Unlock()
	sources = make(map[string]QuoteGetter)
}

// Names returns a sorted list of the names of the registered quoteGetters.
func Names() []string {
	sourcesMu.RLock()
	defer sourcesMu.RUnlock()

	list := make([]string, 0, len(sources))
	for name := range sources {
		list = append(list, name)
	}
	sort.Strings(list)

	return list
}

// Get returns the registered QuoteGetter by name.
// Returns nil if no getter is found for the given name.
func Get(name string) QuoteGetter {
	sourcesMu.RLock()
	defer sourcesMu.RUnlock()

	return sources[name]
}
